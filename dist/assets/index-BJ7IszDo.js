import{c as L,a as G}from"./mipmaps-kMQ0t0FP.js";import{v as I,G as w,j as N,V as n}from"./uwal-BNRo3Xsn.js";import{M as U}from"./MipmapFilter-nkAaR1eK.js";import{v as z,a}from"./wgpu-matrix.module-3qzuEYdi.js";/**
 * @module Mipmap Filter
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-textures.html#mipmapfilter}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(f){let t;try{t=new(await I.RenderPipeline(f,"Mipmap Filter"))}catch(e){alert(e)}t.CreatePipeline({module:t.CreateShaderModule([w.Quad,U])});const m=t.CreateColorAttachment();m.clearValue=new N(5000268).rgba,t.CreatePassDescriptor(m);const u=new(await I.LegacyTexture());let d=0;const M=0,R=[],p=[g(L(),"Blended"),g(G(),"Checked")];for(let e=0;e<8;e++){const s=u.CreateSampler({addressModeU:n.ADDRESS.REPEAT,addressModeV:n.ADDRESS.REPEAT,magFilter:e&1?n.FILTER.LINEAR:n.FILTER.NEAREST,minFilter:e&2?n.FILTER.LINEAR:n.FILTER.NEAREST,mipmapFilter:e&4?n.FILTER.LINEAR:n.FILTER.NEAREST}),o=16*Float32Array.BYTES_PER_ELEMENT,r=t.CreateBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,size:o}),c=new Float32Array(o/Float32Array.BYTES_PER_ELEMENT),i=c.subarray(M,16);t.AddBindGroups(p.map(l=>t.CreateBindGroup(t.CreateBindGroupEntries([s,l.createView(),{buffer:r}])))),R.push({matrixBuffer:r,matrixValues:c,matrix:i})}const T=1,S=2e3,x=[0,1,0],C=[0,0,0],h=60*Math.PI/180,b=[0,0,2],A=z.set(1.2,.7),E=a.perspective(h,t.AspectRatio,T,S),v=a.inverse(a.lookAt(b,C,x)),P=a.multiply(E,v);function g(e,s){const o=u.CreateTexture({usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,size:[e[0].width,e[0].height],mipLevelCount:e.length,label:`${s} Texture`,format:"rgba8unorm"});return e.forEach(({data:r,width:c,height:i},l)=>u.WriteTexture(r,{bytesPerRow:c*4,texture:o,mipLevel:l,width:c,height:i})),o}function B(){R.forEach(({matrix:e,matrixBuffer:s,matrixValues:o},r)=>{const i=r%4-1.5,l=+(r<4)*2-1,F=r*p.length+d,y=[i*A[0],l*A[1],-50*.5];a.translate(P,y,e),a.rotateX(e,.5*Math.PI,e),a.scale(e,[1,100,1],e),a.translate(e,[-.5,-.5,0],e),t.WriteBuffer(s,o),t.SetActiveBindGroups(F),t.Render(6,!1)}),t.Submit()}new ResizeObserver(e=>{for(const s of e){const{inlineSize:o,blockSize:r}=s.contentBoxSize[0];t.SetCanvasSize(o,r)}a.perspective(h,t.AspectRatio,T,S,E),a.multiply(E,v,P),B()}).observe(document.body),f.addEventListener("click",()=>{d=(d+1)%p.length,B()})})(document.getElementById("lesson"));
