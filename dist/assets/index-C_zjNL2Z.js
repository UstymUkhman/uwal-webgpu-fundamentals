import{M as L}from"./MipmapFilter-nkAaR1eK.js";import{v as B,G as M,j as x,V as n}from"./uwal-BNRo3Xsn.js";import{v as N,a}from"./wgpu-matrix.module-3qzuEYdi.js";import{F as D}from"./f-NXDKetds.js";const _=""+new URL("../images/granite.jpeg",import.meta.url).href,j=""+new URL("../images/coins.jpg",import.meta.url).href;/**
 * @module GPU Mipmaps
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Loading Images into Textures
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html#a-generating-mips-on-the-gpu}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.0.5
 * @license MIT
 */(async function(d){let t;try{t=new(await B.RenderPipeline(d,"GPU Mipmaps"))}catch(e){alert(e)}const C=async e=>await c.CreateBitmapImage(await(await fetch(e)).blob(),{colorSpaceConversion:"none"}),c=new(await B.LegacyTexture());c.SetRenderer(t);const p=await Promise.all([u(D,{mipmaps:!0}),u(j,{mipmaps:!0}),u(_,{mipmaps:!0})]);let m=0;const h=0,R=[],T=1,g=2e3,y=[0,1,0],F=[0,0,0],S=Math.PI*60/180,G=[0,0,2],A=N.set(1.2,.7),l=a.perspective(S,t.AspectRatio,T,g),I=a.inverse(a.lookAt(G,F,y)),P=a.multiply(l,I);t.CreatePipeline({module:t.CreateShaderModule([M.Quad,L])});const v=t.CreateColorAttachment();v.clearValue=new x(5000268).rgba,t.CreatePassDescriptor(v);for(let e=0;e<8;e++){const s=c.CreateSampler({addressModeU:n.ADDRESS.REPEAT,addressModeV:n.ADDRESS.REPEAT,magFilter:e&1?n.FILTER.LINEAR:n.FILTER.NEAREST,minFilter:e&2?n.FILTER.LINEAR:n.FILTER.NEAREST,mipmapFilter:e&4?n.FILTER.LINEAR:n.FILTER.NEAREST}),o=16*Float32Array.BYTES_PER_ELEMENT,r=t.CreateBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,size:o}),i=new Float32Array(o/Float32Array.BYTES_PER_ELEMENT),E=i.subarray(h,16);t.AddBindGroups(p.map(f=>t.CreateBindGroup(t.CreateBindGroupEntries([s,f.createView(),{buffer:r}])))),R.push({matrixBuffer:r,matrixValues:i,matrix:E})}async function u(e,s){const{mipmaps:o,flip:r}=s,i=await C(e);return c.CopyImageToTexture(i,{flipY:r,create:{usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,format:"rgba8unorm",mipmaps:o}})}function w(){R.forEach(({matrix:e,matrixBuffer:s,matrixValues:o},r)=>{const E=r%4-1.5,f=+(r<4)*2-1,U=r*p.length+m,b=[E*A[0],f*A[1],-50*.5];a.translate(P,b,e),a.rotateX(e,Math.PI*.5,e),a.scale(e,[1,100,1],e),a.translate(e,[-.5,-.5,0],e),t.WriteBuffer(s,o),t.SetActiveBindGroups(U),t.Render(6,!1)}),t.Submit()}new ResizeObserver(e=>{for(const s of e){const{inlineSize:o,blockSize:r}=s.contentBoxSize[0];t.SetCanvasSize(o,r)}a.perspective(S,t.AspectRatio,T,g,l),a.multiply(l,I,P),w()}).observe(document.body),d.addEventListener("click",()=>{m=(m+1)%p.length,w()})})(document.getElementById("lesson"));
