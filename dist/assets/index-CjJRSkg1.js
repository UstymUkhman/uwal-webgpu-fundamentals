import{addButtonLeftJustified as ye}from"https://webgpufundamentals.org/webgpu/resources/js/gui-helpers.js";import{v as De,u as U,a as je,t as Ie}from"./uwal-BNRo3Xsn.js";import{c as Pe}from"./ConeVertices-DQO7wRFY.js";import{S as G,T as oe}from"./Transform-BHmizGDB.js";import{C as Ae}from"./Cube-X1sXt6jj.js";import{b as p,a as V}from"./wgpu-matrix.module-3qzuEYdi.js";/**
 * @module Making a Hand
 * @author Ustym Ukhman <ustym.ukhman@gmail.com>
 * @description This lesson is reproduced from WebGPU Scene Graphs
 * {@link https://webgpufundamentals.org/webgpu/lessons/webgpu-scene-graphs.html#a-hand}&nbsp;
 * and developed by using a version listed below. Please note that this code
 * may be simplified in future thanks to more recent library APIs.
 * @version 0.1.0
 * @license MIT
 */(async function($){let i;$.style.backgroundColor="#000";try{i=new(await De.Renderer($,"Making Hand",{alphaMode:"premultiplied"}))}catch(e){alert(e)}const M={min:-90,max:90,step:1,converters:GUI.converters.radToDeg},ne={min:-180,max:180,step:1,converters:GUI.converters.radToDeg},re=new Set([0,1,3]),ae=[1,1,1,1],se=100;let F=!1;const y=[];let D,L,S=0;const x=[],c=[];let j,ie=0,W=0;const a={cameraRotation:U.DegreesToRadians(-45),animate:!1,showMeshNodes:!1,showAllTransforms:!1,translation:p.zero(),rotation:p.zero(),scale:p.create(1,1,1)},w=new G("root"),u=new GUI().onChange(T),z=(e,t,o)=>(t-e)*o+e;u.add(a,"cameraRotation",ne),u.add(a,"animate").onChange(e=>s.enable(!e)),u.add(a,"showMeshNodes").onChange(ee),u.add(a,"showAllTransforms").onChange(Q),u.addButton("Fire!",Re);const s=u.addFolder("Orientation");s.onChange(Se);const ce=[s.add(a.translation,"0",-200,200,1).name("Translation X"),s.add(a.translation,"1",-200,200,1).name("Translation Y"),s.add(a.translation,"2",-200,200,1).name("Translation Z"),s.add(a.rotation,"0",M).name("Rotation X"),s.add(a.rotation,"1",M).name("Rotation Y"),s.add(a.rotation,"2",M).name("Rotation Z"),s.add(a.scale,"0",.1,100).name("Scale X"),s.add(a.scale,"1",.1,100).name("Scale Y"),s.add(a.scale,"2",.1,100).name("Scale Z")],d=new je(60,1,2e3);let O=d.UpdateViewProjection();i.CreatePassDescriptor(i.CreateColorAttachment(),i.CreateDepthStencilAttachment());const R=new Ie,de=15,r=new i.Pipeline,k=r.CreateShaderModule(Ae),{layout:fe,buffer:E}=r.CreateVertexBuffer({name:"color",format:"unorm8x4"},36);R.SetRenderPipeline(await i.AddPipeline(r,{primitive:{cullMode:"back"},fragment:r.CreateFragmentState(k),depthStencil:r.CreateDepthStencilState(),vertex:r.CreateVertexState(k,void 0,[R.GetPositionBufferLayout(r),fe])}));const le=[200,200,70,90,130,110,70,200,210,160,160,220,200,70,120,80,70,200],Y=R.UV.length/2,I=new Uint8Array(Y*4);for(let e=0,t=0;e<Y;t=(++e/4|0)*3){const o=le.slice(t,t+3);I.set(o,e*4),I[e*4+3]=255}const{vertexData:q,colorData:ue,vertices:me}=Pe(10,20),X=r.CreateVertexBuffer(q),{buffer:Z}=r.CreateVertexBuffer({name:"color",format:"unorm8x4"},me);r.WriteBuffer(Z,ue),r.WriteBuffer(X,q),r.WriteBuffer(E,I),R.AddVertexBuffers(E);const he=[X,Z],pe=Object.values(r.IndexBuffer),we=r.VertexBuffers.map(({buffer:e})=>e),v=[U.DegreesToRadians(15),0,0],P=C("wrist",w,[[0,-35,0]]),B=C("palm",P,[[0,68,0]]),Be=[P,B,...b("thumb",B,2,20,[[-50,-8,3.33],v]),...b("index finger",B,3,30,[[-25,-3,3.33],v]),...b("middle finger",B,3,35,[[-0,-1,3.33],v]),...b("ring finger",B,3,33,[[25,-2,3.33],v]),...b("pinky",B,3,25,[[45,-6,3.33],v])];A(C("palm mesh",P,[void 0,void 0,[100,100,10]]));const J=C("finger tip",w.Find("index finger-2"),[[0,15,0]]),Ce=u.addFolder("Nodes"),ge=_(Ce,w);K(w.Children[0]),Q(!1),ee(!1);function _(e,t,o,n){const f=[],m=n===void 0;if(t.Transform instanceof oe){const l=`${m?"":`${n} +-`}${t.Label}`;f.push(ye(e,l,()=>K(t)))}return n=m?"":`${n}${o?"   ":" | "}`,f.push(...t.Children.map((l,h)=>_(e,l,h===t.Children.length-1,n))),f.flat()}function Se(){const e=j.Transform;e.Translation.set(a.translation),e.Rotation.set(a.rotation),e.Scale.set(a.scale)}function H(){const e=j.Transform;a.translation.set(e.Translation),a.rotation.set(e.Rotation),a.scale.set(e.Scale),s.updateDisplay()}function K(e){j=e,s.name(`Orientation: ${e.Label}`),H()}function Q(e){ce.forEach((t,o)=>t.show(e||re.has(o)))}function ee(e){for(const t of ge)t.domElement.textContent.includes("mesh")&&t.show(e)}function xe(e){x.splice(x.indexOf(e),1)}function A(e,t=we,o=pe){const n=x.push({node:e,vertexBuffers:t,indexBuffer:o});return x[n-1]}function C(e,t,o=[]){const n=new G(e,new oe(...o));return t&&(n.Parent=t),n}function b(e,t,o,n,f){const m=e,l=[];for(let h=0;h<o;++h){const g=C(e,t,f),N=C(`${e}-mesh`,g,[void 0,void 0,[10,n,10]]);e=`${m}-${h+1}`,A(N),l.push(g),t=g,f=[[0,n,3.33],[U.DegreesToRadians(15),0,0]]}return l}function ve(e,t,o){if(S===y.length){const{projection:h,buffer:g}=r.CreateUniformBuffer("projection"),{color:N,buffer:te}=r.CreateUniformBuffer("color");r.AddBindGroups(r.CreateBindGroup(r.CreateBindGroupEntries([te,g]))),y.push({projectionValue:h,projectionBuffer:g,colorValue:N,colorBuffer:te})}const{projectionValue:n,projectionBuffer:f,colorValue:m,colorBuffer:l}=y[S];m.set(ae),r.WriteBuffer(l,m),V.multiply(O,e,n),r.WriteBuffer(f,n),r.SetActiveBindGroups(S),r.SetVertexBuffers(t),r.SetIndexBuffer(...o),S=++S%(de+c.length),i.Render(!1)}function T(){D||(D=requestAnimationFrame(Me))}function be(e){const{node:t,vertexBuffers:o,indexBuffer:n}=e;ve(t.WorldMatrix,o,n)}function Te(e,t){if(c.length){for(T();c.length&&c[0].endTime<=e;){const o=c.shift();o.node.Parent=null,xe(o.mesh)}for(const o of c){const n=p.mulScalar(o.velocity,t);V.multiply(V.translation(n),o.node.LocalMatrix,o.node.LocalMatrix)}}}function Re(){const e=new G(`shot-${ie++}`),t=A(e,he,[]);V.translate(J.WorldMatrix,[0,20,0],e.LocalMatrix);const o=p.mulScalar(p.normalize(p.getAxis(J.WorldMatrix,1)),se);e.Parent=w;const n=performance.now()*.001+5;c.push({node:e,mesh:t,velocity:o,endTime:n}),T()}function Ve(){Be.forEach((e,t)=>{const o=Math.sin(W+t*.1)*.5+.5;e.Transform.Translation[2]=z(0,10,o),e.Transform.Rotation[0]=z(0,Math.PI*.25,o)})}function Me(){D=void 0,d.ResetMatrix(),d.Translate([60,20,0]),d.RotateY(a.cameraRotation),d.Translate([0,0,300]),O=d.UpdateViewProjection(),w.UpdateWorldMatrix();for(const n of x)be(n);i.Submit();const e=a.animate||c.length,t=performance.now()*.001,o=F&&t-L||0;L=t,e&&(W+=o),F=e,a.animate&&(Ve(),H(),T()),Te(t,o)}new ResizeObserver(e=>{for(const t of e){const{inlineSize:o,blockSize:n}=t.contentBoxSize[0];i.SetCanvasSize(o,n),d.AspectRatio=i.AspectRatio,d.UpdateViewProjection()}T()}).observe(document.body)})(document.getElementById("lesson"));
